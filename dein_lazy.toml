[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'


[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']



[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
  '''
on_ft = ['json']


[[plugins]]        
repo = 'prabirshrestha/vim-lsp'        
hook_add = '''    
    let g:lsp_signs_enabled = 1    
    let g:lsp_diagnostics_enabled = 1    
    let g:lsp_diagnostics_echo_cursor = 1    
    let g:lsp_virtual_text_enabled = 1    
    let g:lsp_signs_error = {'text': '✗'}    
    let g:lsp_signs_warning = {'text': '‼'}    
    let g:lsp_signs_information = {'text': 'i'}    
    let g:lsp_signs_hint = {'text': '?'}    
    
    let s:pyls_config = {'pyls': {'plugins': {
    \   'pycodestyle': {
    \       'enabled': v:true,
    \   },
    \   'pydocstyle': {
    \       'enabled': v:true,
    \   },
    \   'pylint': {
    \       'enabled': v:true,
    \   },
    \   'flake8': {
    \       'enabled': v:true,
    \   },
    \   'jedi_definition': {
    \     'follow_imports': v:true,
    \     'follow_builtin_imports': v:true,
    \   },
    \ }}}
    
    if (executable('pyls'))    
        augroup LspPython    
            autocmd!    
            autocmd User lsp_setup call lsp#register_server({    
                \ 'name': 'pyls',    
                \ 'cmd': { server_info -> ['pyls'] },    
                \ 'whitelist': ['python'],    
                \})    
        augroup END    
    endif    
    
    nnoremap <C-]> :<C-u>LspDefinition<CR>    
    nnoremap K :<C-u>LspHover<CR>    
    nnoremap <LocalLeader>R :<C-u>LspRename<CR>    
    nnoremap <LocalLeader>n :<C-u>LspReferences<CR>    
    nnoremap <LocalLeader>f :<C-u>LspDocumentDiagnostics<CR>    
    nnoremap <LocalLeader>s :<C-u>LspDocumentFormat<CR>    
    set omnifunc=lsp#complete    
    hi Pmenu ctermbg=Gray
'''    
on_ft = ['python']

        
[[plugins]]    
repo = 'prabirshrestha/async.vim'    


[[plugins]]        
repo = 'mattn/vim-lsp-settings'   
